pipeline {
    agent any
    
    parameters {
        string(name: 'SL_USERNAME', defaultValue: '', description: 'Softlayer username')
        password(name: 'SL_API_KEY', defaultValue: 'SECRET', description: 'Softlayer API key')
        booleanParam(name: 'SL_VIRTUAL_GUEST', defaultValue: false, description: 'Tell to the job when is being run on a VM or a Baremetal. (By default unset means VSI -- Virtual Machine)')
        file(name:'hostnames', description:'contains list of SL machines ids with their respective hostnames. e.g. 12344123 sl-hostname.ibm.com')
    }
    stages {
        stage ('Initialize') {
            environment {
                DISPLAYNAME = "BOOTSTRAP_Temp"
            }
            steps {
                script {
                    currentBuild.displayName = "${env.DISPLAYNAME}-#${env.BUILD_NUMBER}"
                    currentBuild.description = ""
                    }
                    echo 'Initializing..'
                    echo "Hello ${params.SL_USERNAME}"
                    echo "parm hostnames: ${params.hostnames}"
                    echo "$SL_USERNAME"
                    echo "$SL_API_KEY"
                    echo "$hostnames"
                    echo "The build number is ${env.BUILD_NUMBER}"
            }
        }
        stage('Upload File') {
         steps {
             script {
                 
                        def userFilePath = input message: 'Upload file', parameters: [file(name: 'userFile.txt', description: 'Upload only CSV file')]
                        def fileContent = readFile "${userFilePath}"
                        
                         echo ("User's File Path is : ${userFilePath}")
                         echo("File content is: ${fileContent}") 
        }
             echo "User's file uploaded"
         }
            
        stage('write') {
           steps {
               script {
                   def date = new Date()
                   def data = "Hello World\nSecond line\n" + date
                   writeFile(file: 'dataFromPipeline.txt', text: data)
                   sh "ls -l"
               }
           }
       }
        stage('read') {
           steps {
               script {
                   def data = readFile(file: './dataFromPipeline.txt')
                   println(data)
               }
           }
       }
        stage('Build') {
            steps {
                echo 'Building..'
                sh 'chmod +x scripts/jenkins-scripts.sh'
                sh 'scripts/jenkins-scripts.sh'
            }
        }
    }
}
